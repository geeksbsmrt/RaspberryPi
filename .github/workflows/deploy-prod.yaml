name: Deploy Docker Stack to Prod

on:
  push:
    branches:
      - main
    paths:
      - "docker/**"
      - "secrets.sops.env"
      - ".github/workflows/deploy-prod.yaml"
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Prod
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify SOPS and age installation on runner
        run: |
          echo "Checking SOPS version..."
          sops --version --check-for-updates
          echo "Checking age version..."
          age --version

      - name: Decrypt secrets.sops.env to .env file on Pi
        env:
          SOPS_AGE_KEY: ${{ secrets.RUNNER_AGE_PRIVATE_KEY }}
          TARGET_ENV_FILE: ${{ secrets.DOCKER_DIR }}/.env
          # Using an intermediate env var for the target file path for clarity in the script
        run: |
          echo "Decrypting secrets from $GITHUB_WORKSPACE/secrets.sops.env to ${TARGET_ENV_FILE}"
          sudo -E sops --decrypt "$GITHUB_WORKSPACE/secrets.sops.env" > "${TARGET_ENV_FILE}"
          sudo -E chmod 600 "${TARGET_ENV_FILE}"
          echo ".env file created at ${TARGET_ENV_FILE} with restricted permissions."

      - name: Check for Tailscale and Install if Missing
        run: |
          # This step is already quiet, no changes needed.
          if command -v tailscale &> /dev/null
          then
              echo "Tailscale is already installed. Skipping installation."
          else
              echo "Tailscale not found. Installing..."
              curl -fsSL https://tailscale.com/install.sh | sudo sh
          fi

      - name: Ensure Tailscale is Up and Registered
        env:
          TS_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          # The 'sudo tailscale status' check is already silent with &> /dev/null
          if sudo tailscale status &> /dev/null; then
            echo "Tailscale is already running and authenticated."
            echo "Ensuring settings (exit-node, hostname) are up-to-date..."
            # Redirect standard output to /dev/null to hide connection details on success.
            # Errors will still be printed.
            sudo tailscale up --advertise-routes=${MACVLAN_SUBNET} --advertise-exit-node --hostname=rpi-docker-host --accept-dns=false > /dev/null
          else
            echo "Tailscale not running or not authenticated. Attempting to bring up..."

            if [ -z "$TS_AUTH_KEY" ]; then
              echo "::error::TAILSCALE_AUTH_KEY secret is not set in GitHub repository settings. Cannot perform initial authentication."
              exit 1
            fi

            # Check the exit code for error handling, but redirect stdout to hide sensitive output on success.
            if ! sudo tailscale up --authkey="${TS_AUTH_KEY}" --advertise-exit-node --hostname="rpi-docker-host" > /dev/null; then
              echo "::error::Failed to bring Tailscale up. The TAILSCALE_AUTH_KEY may be invalid, expired, or already used."
              exit 1
            fi
            echo "Tailscale brought up and authenticated successfully."
          fi

      - name: Verify Tailscale Connection Silently
        # This step replaces the previous "Check Final Tailscale Status"
        # to confirm success without printing IPs.
        run: |
          echo "Verifying Tailscale is active..."
          if sudo tailscale status &> /dev/null; then
            echo "âœ… Tailscale is active and connected."
          else
            echo "::error::Tailscale is not connected after setup attempt."
            exit 1
          fi

      - name: Prepare Docker Configurations (Template Configs)
        env:
          DOCKER_CONFIG_TARGET_DIR: ${{ secrets.DOCKER_DIR }} # For the .env file path
        run: |
          echo "Sourcing environment variables from ${DOCKER_CONFIG_TARGET_DIR}/.env"
          set -a # Automatically export all variables from sourced file
          if [ -f "${DOCKER_CONFIG_TARGET_DIR}/.env" ]; then
            source "${DOCKER_CONFIG_TARGET_DIR}/.env"
          else
            echo "ERROR: .env file not found at ${DOCKER_CONFIG_TARGET_DIR}/.env. Cannot proceed with templating."
            exit 1 # Exit if .env file is crucial and not found
          fi
          set +a

          # --- PiHole DNSMasq ---
          DNSMASQ_TEMPLATE_PATH="$GITHUB_WORKSPACE/docker/pihole/dnsmasq.d/05-custom-wildcards.conf.template"
          DNSMASQ_OUTPUT_PATH="$GITHUB_WORKSPACE/docker/pihole/dnsmasq.d/05-custom-wildcards.conf"
          echo "Templating custom dnsmasq configuration..."
          # Ensure envsubst is available on the runner (it should be)
          envsubst < "${DNSMASQ_TEMPLATE_PATH}" > "${DNSMASQ_OUTPUT_PATH}"
          echo "dnsmasq configuration templated."

          # --- Prometheus ---
          # Define input and output paths using GITHUB_WORKSPACE directly
          INPUT_TEMPLATE_PATH="$GITHUB_WORKSPACE/docker/prometheus/config/prometheus.yml.template"
          OUTPUT_PROCESSED_PATH="$GITHUB_WORKSPACE/docker/prometheus/config/prometheus.yml"
          echo "Templating Prometheus configuration..."
          echo "Input template: ${INPUT_TEMPLATE_PATH}"
          echo "Output file: ${OUTPUT_PROCESSED_PATH}"

          # Check if the template file actually exists before trying to use it
          if [ ! -f "${INPUT_TEMPLATE_PATH}" ]; then
            echo "ERROR: Template file NOT FOUND at ${INPUT_TEMPLATE_PATH}"
            echo "Listing contents of $GITHUB_WORKSPACE/docker/prometheus/config/ for debugging:"
            ls -la "$GITHUB_WORKSPACE/docker/prometheus/config/" || echo "Could not list directory."
            exit 1
          fi

          # Perform the substitution
          # All variables sourced from .env should now be available in the environment for envsubst
          envsubst < "${INPUT_TEMPLATE_PATH}" > "${OUTPUT_PROCESSED_PATH}"

          if [ $? -eq 0 ]; then
            echo "Prometheus configuration templated successfully to ${OUTPUT_PROCESSED_PATH}"
          else
            echo "ERROR: envsubst command failed."
            exit 1
          fi

          # --- Unbound ---
          UNBOUND_TEMPLATE_PATH="$GITHUB_WORKSPACE/docker/unbound/unbound.conf.template"
          UNBOUND_OUTPUT_PATH="$GITHUB_WORKSPACE/docker/unbound/unbound.conf" # Final config name
          echo "Templating Unbound configuration..."
          echo "Input template: ${UNBOUND_TEMPLATE_PATH}"
          echo "Output file: ${UNBOUND_OUTPUT_PATH}"
          if [ ! -f "${UNBOUND_TEMPLATE_PATH}" ]; then
            echo "ERROR: Unbound template file NOT FOUND at ${UNBOUND_TEMPLATE_PATH}"
            exit 1
          fi
          # IP_PIHOLE and IP_BLACKBOX are now in the environment from the sourced .env file
          # List only the specific variables needed for Unbound to prevent unwanted substitutions
          envsubst '${IP_PIHOLE} ${IP_BLACKBOX}' < "${UNBOUND_TEMPLATE_PATH}" > "${UNBOUND_OUTPUT_PATH}"
          if [ $? -eq 0 ]; then
            echo "Unbound configuration templated successfully."
          else
            echo "ERROR: envsubst for Unbound command failed."
            exit 1
          fi

      - name: Sync configuration files
        run: |
          echo "Syncing repository contents to ${{ secrets.DOCKER_DIR }}"
          rsync -av --checksum \
            "$GITHUB_WORKSPACE/docker/" \
            "${{ secrets.DOCKER_DIR }}/" \
            --exclude ".git/" \
            --exclude ".github/" \
            --exclude "*.sops.env" \
            --exclude "prometheus/config/prometheus.yml.template" \
            --exclude "unbound/unbound.conf.template"

      - name: Navigate to Docker Compose directory
        run: cd "${{ secrets.DOCKER_DIR }}"

      - name: Pull latest Docker images
        run: |
          cd "${{ secrets.DOCKER_DIR }}"
          sudo docker compose pull

      - name: Apply Docker Compose changes
        run: |
          cd "${{ secrets.DOCKER_DIR }}"
          sudo docker compose up -d --remove-orphans

      - name: Prune unused Docker images
        if: success()
        run: |
          echo "Pruning unused Docker images..."
          sudo docker image prune -af
