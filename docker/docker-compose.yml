services:
  cloudflare_ddns:
    image: favonia/cloudflare-ddns:latest # This is the official image, it supports ARM64
    container_name: cloudflare_ddns
    hostname: cloudflare_ddns
    restart: unless-stopped
    environment:
      # --- Cloudflare Credentials ---
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}

      # --- Domains to Update ---
      - DOMAINS=${CF_DDNS_DOMAINS}

      # --- Other Settings ---
      - PROXIED=${CF_DDNS_PROXIED}
      - UPDATE_CRON=@every 5m
      - IP6_PROVIDER=none
      - TZ="America/New_York"

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    hostname: pihole
    networks:
      macvlan:
        ipv4_address: ${IP_PIHOLE}
      pihole_bridge: {}
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    environment:
      TZ: "America/New_York"
      FTLCONF_webserver_api_password: ${PIHOLE_UI_PASSWORD}
      FTLCONF_dns_listeningMode: "all"
      FTLCONF_dns_upstreams: "${IP_UNBOUND}" # Uses Unbound's parameterized IP
      FTLCONF_dhcp_active: "true"
      FTLCONF_dhcp_start: "${PIHOLE_DHCP_START}"
      FTLCONF_dhcp_end: "${PIHOLE_DHCP_END}"
      FTLCONF_dhcp_router: "${PIHOLE_DHCP_ROUTER}"
      FTLCONF_dhcp_leaseTime: "24h"
      FTLCONF_dhcp_ipv6: "true"
    volumes:
      - "./pihole:/etc/pihole"
      - "./pihole/dnsmasq.d:/etc/dnsmasq.d:ro"
    cap_add:
      - NET_ADMIN
      - SYS_TIME
      - SYS_NICE
    restart: unless-stopped

  unbound:
    container_name: unbound
    image: "mvance/unbound-rpi:latest"
    hostname: unbound
    networks:
      macvlan:
        ipv4_address: ${IP_UNBOUND}
    volumes:
      - "./unbound:/opt/unbound/etc/unbound"
    restart: unless-stopped

  caddy:
    container_name: caddy
    hostname: caddy
    image: ghcr.io/caddybuilds/caddy-cloudflare:latest
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      macvlan:
        ipv4_address: ${IP_CADDY}
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/error-pages:/srv/error-pages:ro
      - /srv:/srv
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - ACME_DNS=cloudflare
      - IP_GRAFANA=${IP_GRAFANA}
      - IP_UPTIME_KUMA=${IP_UPTIME_KUMA}
      - IP_UMAMI_APP=${IP_UMAMI_APP}

  umami_db:
    image: postgres:alpine
    container_name: umami_db
    hostname: umami_db
    restart: unless-stopped
    networks:
      macvlan:
        ipv4_address: ${IP_UMAMI_DB}
    volumes:
      - umami_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${UMAMI_DB_USER}
      POSTGRES_PASSWORD: ${UMAMI_DB_PASSWORD}
      POSTGRES_DB: ${UMAMI_DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${UMAMI_DB_USER} -d ${UMAMI_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  umami_app:
    image: docker.umami.is/umami-software/umami:postgresql-latest
    container_name: umami_app
    hostname: umami_app
    restart: unless-stopped
    networks:
      macvlan:
        ipv4_address: ${IP_UMAMI_APP}
    depends_on:
      umami_db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${UMAMI_DB_USER}:${UMAMI_DB_PASSWORD}@${IP_UMAMI_DB}:5432/${UMAMI_DB_NAME} # Uses Umami DB's parameterized IP
      DATABASE_TYPE: postgresql
      APP_SECRET: ${UMAMI_APP_SECRET}
      TZ: "America/New_York"
      DISABLE_LOGIN: "false"

  # --- Monitoring Services ---
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/config:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=30d"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    networks:
      macvlan:
        ipv4_address: ${IP_PROMETHEUS}

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - TZ="America/New_York"
    networks:
      macvlan:
        ipv4_address: ${IP_GRAFANA}

  rpi_node_exporter:
    image: prom/node-exporter:latest
    container_name: rpi_node_exporter
    hostname: rpi_node_exporter
    restart: unless-stopped
    network_mode: host
    pid: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    hostname: cadvisor
    restart: unless-stopped
    # privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      macvlan:
        ipv4_address: ${IP_CADVISOR}

  blackbox_exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox
    hostname: blackbox
    restart: unless-stopped
    volumes:
      - ./blackbox/config:/config
    command:
      - "--config.file=/config/blackbox.yml"
    networks:
      macvlan:
        ipv4_address: ${IP_BLACKBOX}

  uptime_kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime_kuma
    hostname: uptime_kuma
    restart: unless-stopped
    volumes:
      - uptime_kuma_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ="America/New_York"
    networks:
      macvlan:
        ipv4_address: ${IP_UPTIME_KUMA}

volumes:
  caddy_data:
  caddy_config:
  prometheus_data:
  grafana_data:
  uptime_kuma_data:
  umami_db_data:

networks:
  pihole_bridge:
    driver: bridge
  macvlan:
    name: pi0vlan
    driver: macvlan
    driver_opts:
      parent: "${MACVLAN_PARENT_INTERFACE}"
    ipam:
      config:
        - subnet: "${MACVLAN_SUBNET}"
          gateway: "${MACVLAN_GATEWAY}"
          ip_range: "${MACVLAN_IP_RANGE}"
          aux_addresses:
            host_shim_ip: "${MACVLAN_HOST_SHIM_IP}"
